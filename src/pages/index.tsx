import Head from "next/head";
import { RootLayout } from "../components/Layout";
import { EmployerTable } from "@/components/EmployerTable";
import {
  Flex,
  Modal,
  ModalContent,
  ModalOverlay,
  Stack,
  Text,
} from "@chakra-ui/react";
import {
  Dispatch,
  SetStateAction,
  createContext,
  useEffect,
  useRef,
  useState,
} from "react";
import { EditEmployer, Employer } from "@/types/Employer";
import { ModalTypes } from "@/types/Modals";
import { getDashboardModal } from "@/components/Modals";
import { defineHomeGreeting } from "@/lib/dateUtils";
import { APIClient } from "@/lib/axios";
import TableSkeletonComponent from "@/components/TableSkeletonComponent";
import { FormErrorMessage } from "@/components/Typography/FormErrorMessage";

interface IDashboardModal {
  isOpen: boolean;
  modalType: ModalTypes;
  employee: Employer | undefined;
}
interface IHomeContext {
  dashboardModal: IDashboardModal;
  employers: Employer[];
  modalError: string | undefined;
  currentEditingEmployer: Partial<Employer> | undefined;
  fetchEmployers: () => void;
  setCurrentEditingEmployer: Dispatch<
    SetStateAction<Partial<Employer> | undefined>
  >;
  setEmployers: Dispatch<SetStateAction<Employer[]>>;
  setDashboardModal: Dispatch<SetStateAction<IDashboardModal>>;
  setModalError: Dispatch<SetStateAction<string | undefined>>;
}

export const defaultHomeModalState = {
  isOpen: false,
  modalType: ModalTypes.ADD_EMPLOYER,
  employee: undefined,
};

export const HomeContext = createContext<IHomeContext>({
  employers: [],
  dashboardModal: defaultHomeModalState,
  currentEditingEmployer: undefined,
  modalError: undefined,
  fetchEmployers: () => {},
  setEmployers: () => {},
  setDashboardModal: () => {},
  setCurrentEditingEmployer: () => {},
  setModalError: () => {},
});

export const HomeModals = {};
export default function Home() {
  const [modalError, setModalError] = useState<string | undefined>();
  const [loadingData, setLoadingData] = useState<boolean>(false);
  const [employers, setEmployers] = useState<Employer[]>([]);
  const [currentEditingEmployer, setCurrentEditingEmployer] = useState<
    Partial<Employer> | undefined
  >(undefined);
  const [dashboardModal, setDashboardModal] = useState<IDashboardModal>(
    defaultHomeModalState
  );

  const fetchEmployers = async () => {
    try {
      const response = await APIClient.get("/employer");
      setEmployers(response.data);
    } catch (error) {
      console.error("Failed to fetch employers:", error);
    }
  };

  useEffect(() => {
    setLoadingData(true);
    APIClient.get(`/employer`)
      .then((res) => {
        setEmployers(res.data);
      })
      .catch((error) => console.error(error))
      .finally(() => setLoadingData(false));
  }, []);

  const finalRef = useRef(null);
  return (
    <>
      <Head>
        <title>React Dashboard</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <RootLayout navbarText="Employee Dashboard">
        <HomeContext.Provider
          value={{
            fetchEmployers: fetchEmployers,
            setModalError: setModalError,
            modalError: modalError,
            employers: employers,
            setEmployers: setEmployers,
            dashboardModal: dashboardModal,
            setDashboardModal: setDashboardModal,
            currentEditingEmployer: currentEditingEmployer,
            setCurrentEditingEmployer: setCurrentEditingEmployer,
          }}
        >
          <Stack spacing={5}>
            <Text as="h2" fontSize="lg" fontWeight="500" textAlign="center">
              {defineHomeGreeting()} üëãüèº
            </Text>
            {loadingData ? <TableSkeletonComponent /> : <EmployerTable />}
          </Stack>
          <Modal
            finalFocusRef={finalRef}
            isOpen={dashboardModal.isOpen}
            onClose={() => setDashboardModal(defaultHomeModalState)}
            size="xl"
            isCentered
          >
            <ModalOverlay bg="blackAlpha.300" backdropFilter="blur(10px)" />
            <ModalContent padding="1rem">
              <Flex justifyContent="center">
                <FormErrorMessage size="lg" message={modalError} />
              </Flex>
              {getDashboardModal(dashboardModal.modalType)}
            </ModalContent>
          </Modal>
        </HomeContext.Provider>
      </RootLayout>
    </>
  );
}
